const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const Student = require('../models/studentModel');

const router = express.Router();

// Register Route
router.post("/register", async (req, res) => {
  const { fullname, usn, password, email, question, answer } = req.body;

  try {
    const existingUser = await Student.findOne({ $or: [{ usn }, { email }] });
    if (existingUser) {
      return res.status(400).json({ message: "User with this USN or Email already exists" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newStudent = new Student({
      fullname,
      usn,
      password: hashedPassword,
      email,
      question,
      answer,
    });

    await newStudent.save();

    res.status(201).json({ message: "Registration successful" });
  } catch (error) {
    console.error("Registration error: ", error);
    res.status(500).json({ message: "An error occurred during registration. Please try again." });
  }
});

// Login Route
router.post("/login", async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) {
    return res.status(400).json({ message: "Username and password are required" });
  }

  try {
    const student = await Student.findOne({ usn: username.toLowerCase() });
    if (!student) {
      return res.status(400).json({ message: "User not found" });
    }

    const isMatch = await bcrypt.compare(password, student.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Invalid credentials" });
    }

    const token = jwt.sign({ id: student._id, usn: student.usn }, "secretKey", { expiresIn: "1h" });

    res.status(200).json({ message: "Login successful", token });
  } catch (error) {
    console.error("Login error: ", error);
    res.status(500).json({ message: "An error occurred during login. Please try again." });
  }
});


// Placeholder for placement officer data (this would typically be a database)
const placementOfficers = [
    {
      email: 'placement@bvrith.edu.in',
      password: bcrypt.hashSync('placementlogin123', 10), // hashed password
    },
  ];
  
  // Placement login endpoint
  router.post('/placement-login', async (req, res) => {
    const { email, password } = req.body;
  
    // Find the placement officer
    const officer = placementOfficers.find((officer) => officer.email === email);
  
    if (!officer) {
      return res.status(401).json({ message: 'Invalid email or password' });
    }
  
    // Verify password
    const match = await bcrypt.compare(password, officer.password);
  
    if (!match) {
      return res.status(401).json({ message: 'Invalid email or password' });
    }
  
    // Generate JWT token
    const token = jwt.sign({ email: officer.email }, 'your_jwt_secret', { expiresIn: '1h' });
  
    // Send token to frontend
    res.json({ token });
  });

module.exports = router;
